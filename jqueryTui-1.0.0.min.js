/*!
 * tui JavaScript Library v1.0.5
 * @author tuxiaohua.TangDi / tu_xh@tangdi.net 屠晓华
 * @Copyright 2016 tui.Tu
 * @Tel: 13671816533
 * @Date: 2016-8-1
 * @update: v1.0.0 2016-08-10 create mci (artificial.js,style.css)
 * @update: v1.0.1 2017-01-24 color_Hex_Rgb (L100)
 * @update: v1.0.2 2018-02-02 返回顶层窗体| 创建缓存池 (L1064)
 * @update: v1.0.3 2018-02-26 增加加载进度控件 (L1227)
 * @update: v1.0.4 2018-03-06 [文本格式xml数据] 解析方法 String.getElementsByTagName("root") (L1385)
 * @update: v1.0.5 2018-03-12 [文本格式xml数据] 解析方法 String.getAttribute("style")获取字符串内属性值 (L1461)
 * @update: v1.0.6 2018-03-13 对象外派接口 (L1483)
 */

(function (window, undefined) {
    var tui = function () {};
    tui.extend = function () {
        var options, name, src, copy, copyIsArray, clone,
            target = arguments[0] || {},
            i = 1,
            length = arguments.length,
            deep = false;

        // Handle a deep copy situation
        if (typeof target === "boolean") {
            deep = target;
            target = arguments[1] || {};
            // skip the boolean and the target
            i = 2;
        }

        // Handle case when target is a string or something (possible in deep copy)
        if (typeof target !== "object" && !jQuery.isFunction(target)) {
            target = {};
        }

        // extend jQuery itself if only one argument is passed
        if (length === i) {
            target = this;
            --i;
        }

        for (; i < length; i++) {
            // Only deal with non-null/undefined values
            if ((options = arguments[i]) != null) {
                // Extend the base object
                for (name in options) {
                    src = target[name];
                    copy = options[name];

                    // Prevent never-ending loop
                    if (target === copy) {
                        continue;
                    }

                    // Recurse if we're merging plain objects or arrays
                    if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && jQuery.isArray(src) ? src : [];

                        } else {
                            clone = src && jQuery.isPlainObject(src) ? src : {};
                        }

                        // Never move original objects, clone them
                        target[name] = jQuery.extend(deep, clone, copy);

                        // Don't bring in undefined values
                    } else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }
        // Return the modified object
        return target;
    };
    function isArraylike(obj) {
        var length = obj.length,
            type = jQuery.type(obj);
        if (jQuery.isWindow(obj)) {
            return false;
        }
        if (obj.nodeType === 1 && length) {
            return true;
        }
        return type === "array" || type !== "function" &&
            (length === 0 ||
            typeof length === "number" && length > 0 && (length - 1) in obj);
    };
    String.prototype.tCopy = function (args){
        var i = 0, n = args || 0, s = "";
        for(; i<args; i++){
            s += this;
        }
        return s;
    };
    String.prototype.tSubtring = function(args){
        var num = args/10;
        return this.substr(0,num) + ((this.length<num)?'':'..');
    };
    /**
     * RGB颜色转换为十六进制
     * 方法: "RGB(23, 245, 56)".colorHex();
     * 结果: "#34538b"
     */
    String.prototype.colorHex = function(){
        var that = this;
        debugger;
        //十六进制颜色值的正则表达式
        var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
        // 如果是rgb颜色表示
        if (/^(rgb|RGB)/.test(that)) {
            var aColor = that.replace(/(?:\(|\)|rgb|RGB)*/g, "").split(",");
            var strHex = "#";
            for (var i=0; i<aColor.length; i++) {
                var hex = Number(aColor[i]).toString(16);
                if(hex.length == 1){
                    hex = "0" + hex;
                }
                strHex += hex;
            }
            if (strHex.length !== 7) {
                strHex = that;
            }
            return strHex;
        } else if (reg.test(that)) {
            var aNum = that.replace(/#/,"").split("");
            if (aNum.length === 6) {
                return that;
            } else if(aNum.length === 3) {
                var numHex = "#";
                for (var i=0; i<aNum.length; i+=1) {
                    numHex += (aNum[i] + aNum[i]);
                }
                return numHex;
            }
        }
        return that;
    };
    /**
     * 十六进制颜色转换为RGB
     * 方法: "#34538b".colorRgb();
     * 结果: "RGB(23, 245, 56)"
     */
    String.prototype.colorRgb = function(param){
        var sColor = this.toLowerCase();
        //十六进制颜色值的正则表达式
        var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
        //如果是16进制颜色
        if (sColor && reg.test(sColor)) {
            if (sColor.length === 4) {
                var sColorNew = "#";
                for (var i=1; i<4; i+=1) {
                    sColorNew += sColor.slice(i, i+1).concat(sColor.slice(i, i+1));
                }
                sColor = sColorNew;
            }
            //处理六位的颜色值
            var sColorChange = [];
            for (var i=1; i<7; i+=2) {
                sColorChange.push(parseInt("0x"+sColor.slice(i, i+2)));
            }
            return 'array' == param ? sColorChange : "RGB(" + sColorChange.join(",") + ")";
        }
        return sColor;
    };
    tui.extend({
        isFullScreen: false,    //是否全屏
        loaddata: [],  //库内数据池
        /**
         * 判断是否是函数
         * @param obj
         * @returns {boolean}
         */
        isFunction: function (obj) {
            return jQuery.type(obj) === "function";
        },
        /**
         * 发送请求
         * @param param
         */
        ajax: function(param){
            if(param && param.url) {
                $.ajax({
                    url: param.url,
                    dataType: param.dataType || "xml",
                    async: param.async || "true",
                    success: param.success || function (obj, status, result) {
                        debugger;
                        /*
                        $(obj).find("Node").each(function (i) {
                            var id = this.getAttribute("id"); //取属性
                            var idvalue = $(this).children("id").text(); //取文本
                        });
                        debugger;
                        */
                    },
                    error: param.error || function (e) {
                        debugger;
                    }
                });
            }
        },
        /**
         * 抛事件 自定义
         * @param eventName
         */
        dispatchEvent: function(eventName, target, param){
            if(eventName && target) {
                var eventObject = document.createEvent('HTMLEvents');
                eventObject.initEvent(eventName, true, true);
                eventObject.data = param;
                target.dispatchEvent(eventObject);
            }
        },
        xmlHttp: function(){
          //if(window.XMLHttpRequest){
          //    return new XMLHttpRequest();
          //}else{
              return new ActiveXObject("Microsoft.XMLHTTP");
              //return new ActiveXObject('Microsoft.XMLDOM');//IE浏览器
          //}
        },
        loadPage: function(url, fun, type){
            if(url) {
                console.log("url="+url);
                var xHttp = this.xmlHttp();
                xHttp.onreadystatechange = function (e) {
                    //debugger;
                    if(xHttp.readyState == 4 && typeof fun == "function") {
                        console.log("[onreadystatechange:OK]_loadPage>>"+url);
                        fun(xHttp);
                        //xHttp.onreadystatechange = null;
                        //xHttp = null;
                    }
                };
                xHttp.open(type || 'get', url, false);
                xHttp.send(null);
            }
        },
        /**
         * 进度事件 自定义
         * COMPLETEALL 全部完成
         * COMPLETE 完成
         * LOADING 加载中
         * ANALYSE 分析
         */
        progressEvent: {
            COMPLETEALL: "progressEvent_COMPLETE_ALL",
            COMPLETE: "progressEvent_COMPLETE",
            LOADING: "progressEvent_LOADING",
            ANALYSE: "progressEvent_ANALYSE"
        },
        /**
         * 菜单事件 自定义
         * VIEWCLICK 菜单图模块点击;
         */
        menuEvent: {
            VIEWCLICK: "menuEvent_VIEWCLICK"
        },
        /**
         * 导航栏事件 自定义
         * NEXTPAGE 下一页
         * LASTPAGE 上一页
         */
        navgEvent: {
            NEXTPAGE: "navgEvent_NEXTPAGE",
            LASTPAGE: "navgEvent_LASTPAGE"
        },
        //Html全屏
        jsFullscreen: function () {
            top.window.moveTo(0, 0);
            //判断是否为IE浏览器
            if (document.all) {
                top.window.resizeTo(screen.availWidth, screen.availHeight);
            }
            //判断是否为Netscape浏览器(document.layers是Netscape 4.x专有的属性，由于
            //document.layers在Netscape6.0以后已经取消，此方法只适用于6.0之前的浏览器)

            else if (document.layers || document.getElementById) {
                if (top.window.outerHeight < screen.availHeight ||
                    top.window.outerWidth < screen.availWidth) {
                    top.window.outerHeight = screen.availHeight;
                    top.window.outerWidth = screen.availWidth;
                }
            }
        },
        //进入全屏
        requestFullScreen: function () {
            var de = document.documentElement;
            if (de.requestFullscreen) {
                de.requestFullscreen();
            } else if (de.mozRequestFullScreen) {
                de.mozRequestFullScreen();
            } else if (de.webkitRequestFullScreen) {
                de.webkitRequestFullScreen();
            }else{
                if(!this.isFullScreen) {
                    this.F11();
                }
            }
            this.isFullScreen = true;
            de = null;
        },
        //退出全屏
        exitFullscreen: function () {
            var de = document;
            if (de.exitFullscreen) {
                de.exitFullscreen();
            } else if (de.mozCancelFullScreen) {
                de.mozCancelFullScreen();
            } else if (de.webkitCancelFullScreen) {
                de.webkitCancelFullScreen();
            }else{
                if(this.isFullScreen) {
                    this.F11();
                }
            }
            this.isFullScreen = false;
            de = null;
        },
        F11: function () {
            var WsShell = new ActiveXObject('WScript.Shell');
            if(WsShell != null){
                WsShell.SendKeys('{F11}');
            }else{
                this.jsFullscreen();
            }
            WsShell = null;
        },
        fullScreen: function (of) {
            //debugger;
            if (of) {
                this.requestFullScreen();
            } else {
                this.exitFullscreen();
            }
        },
        /**
         * 创建导航栏 (拥有触摸移动功能)
         * @param param
         * @param className
         * param{tagert:创建地区, top:0, left:0, w:0, h:0, per:间隔, num:3, data:[{url:图片, fun:点击事件}], button:{imgl:左边图片url, imgr:右边图片url, w:图宽度, h:图高度}}
         * 创建控件
         * var arr = [{url: "assets/images/service.png",fun: test}, {url: "assets/images/service1.png"}];
         * var button = {imgl: "assets/images/last.png", imgr: "assets/images/next.png", w: 50, h: 50};
         * var param = {target: "toper", w: 700, h: 200, per: 5, num: 3, data: arr, button: button, imgW: 150, y: 20};
         * var navg = tui.createNavg(param);
         * 翻页事件
         * 上一页 tui.dispatchEvent(tui.navgEvent.LASTPAGE, navg);
         * 下一页 tui.dispatchEvent(tui.navgEvent.NEXTPAGE, navg);
         */
        createNavg: function(param,className){
            if(param){
                var cn, target, bl, br, bw = 0,bh = 0,d = param["data"], b = param["button"],bw = b ? (b["w"] || 50):50, bh = b ? (b["h"] || 50):50;
                if(d && d.length > 0){
                    var w = param["w"] || 600, h = param["h"] || 100, x = param["x"] || 0, y = param["y"] || 0, byW = w - bw * 2,igW = param["imgW"] || 150,igH = param["imgH"] || 0;
                    var ob,obS = 0,i = 0, l= d.length, c = className || "navgA", per = param["per"] || 0, num = param["num"] || 2, irW = byW /num, irWp = irW - per, irL = irWp*l+50;
                    var cp = document.createElement("div");
                    cp.setAttribute("class","comp");
                    cp.style.width = irL + "px";
                    for(; i < l; i++){
                        ob = d[i];
                        var ir = document.createElement("div");
                        ir.setAttribute("class","inner");
                        if(per>0){
                            ir.style.marginLeft = (per/2) + "px";
                            ir.style.marginRight = (per/2) + "px";
                        }
                        ir.style.width = irWp + "px";
                        if(ob["url"]){
                            var ig = document.createElement("img");
                            ig.setAttribute("src",ob["url"]);
                            ig.style.width = igW + "px";
                            if(igH > 0){
                                ig.style.height = igH + "px";
                            }
                            ig.style.maxWidth = irWp + "px";
                            ig.setAttribute("tabIndex", i);
                            if(ob["fun"]) {
                                ig.onclick = function (e) {
                                    var fun = d[e.target.tabIndex];
                                    if(fun){
                                        fun["fun"](fun,e);
                                    }
                                    fun = null;
                                };
                            }
                            ir.appendChild(ig);
                        }else if(ob["html"]){
                            ir.innerHTML = ob["html"];
                        }
                        cp.appendChild(ir);
                    }

                    var _LASTPAGE = function(){
                        if(obS>0) {
                            obS = obS - num;
                            cp.style.left = (0 - irW*obS) + "px";
                        }
                    };
                    var _NEXTPAGE = function(){
                        if((obS + num)<l) {
                            obS = obS + num;
                            cp.style.left = (0 - irW*obS) + "px";
                        }
                    };
                    var _TouchStart, _TouchEnd;
                    var _onTouchStart = function(e){
                        e.preventDefault();
                        _TouchStart = e.touches[0];
                    };
                    //var _onTouchMove = function(e){e.preventDefault();};
                    var _onTouchEnd = function(e){
                        e.preventDefault();
                        _TouchEnd = e.changedTouches[0];
                        //console.log(_TouchStart.pageX +"==="+ _TouchEnd.pageX);
                         if(_TouchStart.pageX < _TouchEnd.pageX){
                            _LASTPAGE();
                         }else if(_TouchStart.pageX > _TouchEnd.pageX){
                            _NEXTPAGE();
                         }
                    };

                    var by = document.createElement("div");
                    by.setAttribute("class","body");
                    by.appendChild(cp);
                    cn = document.createElement("div");
                    cn.setAttribute("class",c);
                    cn.appendChild(by);
                    cn.addEventListener(tui.navgEvent.LASTPAGE, _LASTPAGE);
                    cn.addEventListener(tui.navgEvent.NEXTPAGE, _NEXTPAGE);
                    cn.addEventListener("touchstart", _onTouchStart, false);
                    //cn.addEventListener('touchmove', _onTouchMove, false);
                    cn.addEventListener('touchend', _onTouchEnd, false);

                    if(b) {
                        if(b["imgl"]) {
                            bl = document.createElement("div");
                            bl.setAttribute("class", "buttonP");
                            bl.style.width = bw + "px";
                            var bli = document.createElement("img");
                            bli.setAttribute("src", b["imgl"]);
                            bli.style.width = bw + "px";
                            bli.style.height = bh + "px";
                            bli.onclick = function(){
                                _LASTPAGE();
                            };
                            bl.appendChild(bli);
                            cn.appendChild(bl);
                        }
                        if(b["imgr"]) {
                            br = document.createElement("div");
                            br.setAttribute("class", "buttonP");
                            br.style.width = bw + "px";
                            var bri = document.createElement("img");
                            bri.setAttribute("src", b["imgr"]);
                            bri.style.width = bw + "px";
                            bri.style.height = bh + "px";
                            bri.onclick = function(){
                                _NEXTPAGE();
                            };
                            br.appendChild(bri);
                            cn.appendChild(br);
                        }
                    }
                }else{
                    return null;
                }
                if(w){
                    cn.style.width = w + "px";  //总空间宽度
                    by.style.width = byW + "px";    //内容空间
                    by.style.left = bw + "px"; //内容左移动 留左按钮空间
                    if(br){
                        br.style.left = ( w - bw ) + "px"; //右按钮
                    }
                }
                if(h){cn.style.height = h + "px";}
                if(x){cn.style.left = x + "px";}
                if(y){cn.style.top = y + "px";}
                if (param["target"]) {
                    target = document.getElementById(param["target"]);
                    if (target) {
                        target.appendChild(cn);
                        target = null;
                        return cn;
                    }else{
                        target = document.getElementsByTagName("body");
                    }
                }else{
                    target = document.getElementsByTagName("body");
                }
                if(target){
                    target[0].appendChild(cn)
                }
                target = null;
                return cn;
            }
            /*
             <div class= "navgA">
             <div class="body">
             <div class="comp">
             <div class="inner"><img src="assets/images/service.png" onclick="alert('aaaa')"/></div>
             <div class="inner"><img src="assets/images/service.png" onclick="alert('bbb')"/></div>
             <div class="inner"><img src="assets/images/service.png" onclick="alert('ccc')"/></div>
             </div>
             </div>
             <div class="buttonP L"><img src="assets/images/last.png" onclick="alert('left')"/></div>
             <div class="buttonP R"><img src="assets/images/next.png" onclick="alert('right')"/></div>
             </div>
             */
            return null;
        },
        /**
         *
         * @param param
         * @param className
         * param{tagert:创建地区, top:0, left:0, w:0, h:0, per:间隔, nx:横数量, ny:纵数量, data:[{url:图片, fun:点击事件}], more:{imgl:左边图片url, imgr:右边图片url, w:宽, h:高}, imgW:单体宽, imgW:单体高}
         * var arr = [{url: "assets/images/service1.png"}, {url: "assets/images/service.png",fun: test}];
         * var param = {target: "body", w: 700, h: 200, per: 5, nx: 4, ny: 2, data: arr, imgW: 150, y: 20, x: 50, more:{imgl:"assets/images/service.png", imgr:"assets/images/service.png", w:30, h:40}};
         * tui.createTable(param);
         */
        createTable: function(param, className) {
            if (param) {
                var target, d = param["data"];
                if (d && d.length > 0) {
                    var w = param["w"] || 600, h = param["h"] || 100, x = param["x"] || 0, y = param["y"] || 0, igW = param["imgW"] || 150,igH = param["imgH"], nx = param["nx"] || 4, ny = param["xy"] || 2;
                    var ob,obS = 0,i = 0, l= d.length, c = className || "tableA", per = param["per"] || 0, num = param["num"] || 2, irW = w /nx, irWp = irW - per, irH = h /ny, irHp = irH - per, nm = nx * ny;
                    var moreFun, mW, mH;
                    if(l >= nm){
                        returnPage = function(index){
                            if(index == null || index < 0){
                                return;
                            }
                            var imger, obj, pageIndex = index;
                            obS = pageIndex;
                            for(var t=0; t<nm; t++){
                                imger = d[t]["imger"];
                                if(imger){
                                    imger.setAttribute("tabIndex", pageIndex);
                                    obj = d[pageIndex];
                                    if(obj && obj["url"]){
                                        imger.setAttribute("src", obj["url"]);
                                        if(imger.style.display == "none"){
                                            imger.style.display = "";
                                        }
                                    }else{
                                        imger.style.display = "none";
                                    }
                                    pageIndex++;
                                }
                            }
                            imger = null;
                            obj = null;
                            pageIndex = null;
                        };
                        moreFun = function(){
                            var mir = document.createElement("div");
                            mir.setAttribute("class","inner");
                            mir.setAttribute("id","more");
                            if(per>0){
                                mir.style.margin = (per/2) + "px";
                            }
                            mir.style.width = irWp + "px";
                            mir.style.height = irHp + "px";
                            var moreObj = param["more"];
                            if(moreObj){
                                mW = moreObj["w"], mH = moreObj["h"];
                                var migl = document.createElement("img");
                                migl.setAttribute("src",moreObj["imgl"]);
                                migl.title = "上页";
                                if(mW) {
                                    migl.style.width = mW + "px";
                                }
                                if(mH){
                                    migl.style.height = mH + "px";
                                    if(irHp>mH) {
                                        migl.style.top = (irHp - mH)/2 + "px";
                                    }
                                }
                                migl.style.maxWidth = irWp/2 + "px";
                                migl.style.maxHeight = irHp + "px";
                                migl.setAttribute("tabIndex", -1);
                                migl.onclick = function (e) {
                                    if(obS>0){
                                        returnPage(obS+1-nm);
                                    }
                                };
                                var migr = document.createElement("img");
                                migr.setAttribute("src",moreObj["imgr"]);
                                migr.title = "下页";
                                if(mW) {
                                    migr.style.width = mW + "px";
                                }
                                if(mH){
                                    migr.style.height = mH + "px";
                                    if(irHp>mH) {
                                        migr.style.top = (irHp - mH)/2 + "px";
                                    }
                                }
                                migr.style.maxWidth = irWp/2 + "px";
                                migr.style.maxHeight = irHp + "px";
                                migr.setAttribute("tabIndex", -1);
                                migr.onclick = function (e) {
                                    if(l > (obS-1+nm)){
                                        returnPage(obS-1+nm);
                                    }
                                };

                                mir.appendChild(migl);
                                mir.appendChild(migr);
                            }else{
                                var mal = document.createElement("a");
                                mal.innerText = "上页 ";
                                mal.title = "上页";
                                mal.setAttribute("href", "javascript:void()");
                                mal.onclick = function(e){
                                    if(obS>0){
                                        returnPage(obS+1-nm);
                                    }
                                };
                                var mar = document.createElement("a");
                                mar.innerText = " 下页";
                                mal.title = "下页";
                                mar.setAttribute("href", "javascript:void()");
                                mar.onclick = function(e){
                                    if(l > (obS-1+nm)){
                                        returnPage(obS-1+nm);
                                    }
                                };

                                mir.appendChild(mal);
                                mir.appendChild(mar);
                            }
                            return mir;
                        };
                    }

                    var ctcn = document.createElement("div");
                    ctcn.setAttribute("class", c);
                    for(; i < l; i++) {
                        ob = d[i];
                        if(ob["url"]){
                            var ir = document.createElement("div");
                            ir.setAttribute("class","inner");
                            if(per>0){
                                ir.style.margin = (per/2) + "px";
                                /*
                                 ir.style.marginLeft = (per/2) + "px";
                                 ir.style.marginRight = (per/2) + "px";
                                 ir.style.marginTop = (per/2) + "px";
                                 ir.style.marginBottom = (per/2) + "px";
                                 */
                            }
                            ir.style.width = irWp + "px";
                            ir.style.height = irHp + "px";
                            var ig = document.createElement("img");
                            ig.setAttribute("src",ob["url"]);
                            ig.style.width = igW + "px";
                            if(igH){
                                ig.style.height = igH + "px";
                            }
                            ig.style.maxWidth = irWp + "px";
                            ig.style.maxHeight = irHp + "px";
                            ig.setAttribute("tabIndex", i);
                            ob["imger"] = ig;
                            if(ob["fun"]) {
                                ig.onclick = function (e) {
                                    var fun = d[e.target.tabIndex];
                                    if(fun){
                                        fun["fun"](fun,e);
                                    }
                                    fun = null;
                                }
                            }
                            ir.appendChild(ig);
                            ctcn.appendChild(ir);

                            //添加[more按钮实现翻页] - START 1
                            if(i>= nm-2){
                                if(moreFun){
                                    var mf = moreFun();
                                    ctcn.appendChild(mf);
                                }
                                break;
                            }
                            // - END 1
                        }
                    }


                    if(w){ctcn.style.width = w + "px";}
                    if(h){ctcn.style.height = h + "px";}
                    if(x){ctcn.style.left = x + "px";}
                    if(y){ctcn.style.top = y + "px";}
                    if (param["target"]) {
                        target = document.getElementById(param["target"]);
                        if (target) {
                            target.appendChild(ctcn);
                            target = null;
                            return;
                        }else{
                            target = document.getElementsByTagName("body");
                        }
                    }else{
                        target = document.getElementsByTagName("body");
                    }
                    if(target){
                        target[0].appendChild(ctcn)
                    }
                    target = null;
                }
            }
        },
        getValue: function(v){
            if(typeof v =="string") {
                return v.indexOf('%') > 0 ? v : (v + "px");
            }else{
                return v + "px";
            }
        },
        /**
         * 创建信息窗
         * @param param
         * @param className
         * param{tagert:创建地区, top:0, left:0, w:0, h:0,title:标题}
         * var ele = tui.createInfoPane({w:300, h:400, target:"leftpane", title:"通    知"});
         * @returns {*} 返回对象
         */
		createInfoPane: function(param, className) {
            if (param) {
                var target, d = param["data"];
                if (d && d.length > 0) {

                }

                var w = param["w"] || 300, h = param["h"] || 400, x = param["x"] || 0, y = param["y"] || 0, title = param["title"] || "";
                var inp = document.createElement("div");
                inp.setAttribute("class", className || "winPaneB");

                var inpt = document.createElement("div");
                inpt.setAttribute("class", "title");
                inpt.innerText = title;
                var head = document.createElement("div");
                head.setAttribute("class", "head");
                head.appendChild(inpt);
                inp.appendChild(head);

                var pul = document.createElement("ul");
                var pb = document.createElement("div");
                pb.setAttribute("class", "body");
                pb.appendChild(pul);
                inp.appendChild(pb);

                if (w) {inp.style.width = this.getValue(w);}
                if (h) {inp.style.height = this.getValue(h);}
                if (x) {inp.style.left = this.getValue(x);}
                if (y) {inp.style.top = this.getValue(y);}
                if (param["target"]) {
                    target = document.getElementById(param["target"]);
                    if (target) {
                        target.appendChild(inp);
                        target = null;
                        return inp;
                    } else {
                        target = document.getElementsByTagName("body");
                    }
                } else {
                    target = document.getElementsByTagName("body");
                }
                if (target) {
                    target[0].appendChild(inp)
                }
                target = null;
                return inp;
			}else{
                return null;
            }
		},
		/**
         * 信息窗添加数据 - 动态
         * @param param
         * @param className
         * param{tagert:查询对象, {html:内容}}
         * tui.addInfoPane(ele, [{html:"asdfasdfasdfafsd"},{html:"<img src='assets/images/service.png'>"}]);
         */
        addInfoPane: function(target, param){
			var l = param["length"];
            if(param) {
				var ift = param["html"], inpul = $(target).find("ul");
                if(inpul && inpul[0]) {
					if(l){
						var obj, i=0;
						for(; i < l; i++){
							obj = param[i];
							ift = obj["html"];
							if(obj && ift){
								var lier = document.createElement("li");
								lier.innerHTML = ift;
								inpul[0].appendChild(lier);
							}
						}
					}else{
						if(ift){
							var lier = document.createElement("li");
                            lier.innerHTML = ift;
							inpul[0].appendChild(lier);
						}
					}
                    target.scrollTop = 999999;
				}
				obj = null;
				ift = null;
				inpul = null;
            }
        },
        /**
         * 起始色至末位色 根据节数 获取渐变阶段值
         * @param b(string) Hex颜色值
         * @param e(string) Hex颜色值
         * @param step(int) 步骤次数
         * @returns {Array}
         * [案例]
         * var gradient = tui.gradientColor('#013548','#554851',10);
         */
        getColorGradient:  function(b, e, step){
            var hex;
            var bc = b.colorRgb('array');
            var bR = bc[0];
            var bG = bc[1];
            var bB = bc[2];
            var ec = e.colorRgb('array');
            var eR = ec[0];
            var eG = ec[1];
            var eB = ec[2];
            var beR = (eR-bR)/step;
            var beG = (eG-bG)/step;
            var beB = (eB-bB)/step;
            var colorArr = [];
            for(var i=0;i<step;i++){
                hex = 'rgb('+parseInt((beR*i+b))+','+parseInt((beG*i+b))+','+parseInt((beB*i+b))+')';
                colorArr.push(hex.colorHex());
            }
            hex = null;
            bc = null;
            bR = null;
            bG = null;
            bB = null;
            ec = null;
            eR = null;
            eG = null;
            eB = null;
            beR = null;
            brG = null;
            brB = null;
            return colorArr;
        }

    });

    window.tui = tui;
    jQuery.prototype.tui = tui;

    tui.extend({
        JSON: new(function () {
            var sb = [];
            var _dateFormat = null;
            var useHasOwn = !!{}

                    .hasOwnProperty,
                replaceString = function (a, b) {
                    var c = m[b];
                    if (c) {
                        return c
                    }
                    c = b.charCodeAt();
                    return "\\u00" + Math.floor(c / 16).toString(16) + (c % 16).toString(16)
                },
                doEncode = function (o, field) {
                    if (o === null) {
                        sb[sb.length] = "null";
                        return
                    }
                    var t = typeof o;
                    if (t == "undefined") {
                        sb[sb.length] = "null";
                        return
                    } else {
                        if (o.push) {
                            sb[sb.length] = "[";
                            var b,
                                i,
                                l = o.length,
                                v;
                            for (i = 0; i < l; i += 1) {
                                v = o[i];
                                t = typeof v;
                                if (t == "undefined" || t == "function" || t == "unknown") {}
                                else {
                                    if (b) {
                                        sb[sb.length] = ","
                                    }
                                    doEncode(v);
                                    b = true
                                }
                            }
                            sb[sb.length] = "]";
                            return
                        } else {
                            if (o.getFullYear) {
                                if (_dateFormat) {
                                    sb[sb.length] = '"';
                                    if (typeof _dateFormat == "function") {
                                        sb[sb.length] = _dateFormat(o, field)
                                    } else {
                                        sb[sb.length] = mini.formatDate(o, _dateFormat)
                                    }
                                    sb[sb.length] = '"'
                                } else {
                                    var n;
                                    sb[sb.length] = '"';
                                    sb[sb.length] = o.getFullYear();
                                    sb[sb.length] = "-";
                                    n = o.getMonth() + 1;
                                    sb[sb.length] = n < 10 ? "0" + n : n;
                                    sb[sb.length] = "-";
                                    n = o.getDate();
                                    sb[sb.length] = n < 10 ? "0" + n : n;
                                    sb[sb.length] = "T";
                                    n = o.getHours();
                                    sb[sb.length] = n < 10 ? "0" + n : n;
                                    sb[sb.length] = ":";
                                    n = o.getMinutes();
                                    sb[sb.length] = n < 10 ? "0" + n : n;
                                    sb[sb.length] = ":";
                                    n = o.getSeconds();
                                    sb[sb.length] = n < 10 ? "0" + n : n;
                                    sb[sb.length] = '"'
                                }
                                return
                            } else {
                                if (t == "string") {
                                    if (strReg1.test(o)) {
                                        sb[sb.length] = '"';
                                        sb[sb.length] = o.replace(strReg2, replaceString);
                                        sb[sb.length] = '"';
                                        return
                                    }
                                    sb[sb.length] = '"' + o + '"';
                                    return
                                } else {
                                    if (t == "number") {
                                        sb[sb.length] = o;
                                        return
                                    } else {
                                        if (t == "boolean") {
                                            sb[sb.length] = String(o);
                                            return
                                        } else {
                                            sb[sb.length] = "{";
                                            var b,
                                                i,
                                                v;
                                            for (i in o) {
                                                if (!useHasOwn || Object.prototype.hasOwnProperty.call(o, i)) {
                                                    v = o[i];
                                                    t = typeof v;
                                                    if (t == "undefined" || t == "function" || t == "unknown") {}
                                                    else {
                                                        if (b) {
                                                            sb[sb.length] = ","
                                                        }
                                                        doEncode(i);
                                                        sb[sb.length] = ":";
                                                        doEncode(v, i);
                                                        b = true
                                                    }
                                                }
                                            }
                                            sb[sb.length] = "}";
                                            return
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                m = {
                    "\b" : "\\b",
                    "\t" : "\\t",
                    "\n" : "\\n",
                    "\f" : "\\f",
                    "\r" : "\\r",
                    '"' : '\\"',
                    "\\" : "\\\\"
                },
                strReg1 = /["\\\x00-\x1f]/,
                strReg2 = /([\x00-\x1f\\"])/g;
            this.encode = function () {
                var ec;
                return function (o, dateFormat) {
                    sb = [];
                    _dateFormat = dateFormat;
                    doEncode(o);
                    _dateFormat = null;
                    return sb.join("");
                }
            }
            ();
            this.decode = function () {
                var dateRe1 = /^(\d{4})-(\d{2})-(\d{2})[T ](\d{2}):(\d{2}):(\d{2}(?:\.*\d*)?)Z*$/;
                var dateRe2 = new RegExp("^/+Date\\((-?[0-9]+).*\\)/+$", "g");
                var re = /[\"\'](\d{4})-(\d{2})-(\d{2})[T ](\d{2}):(\d{2}):(\d{2})[\"\']/g;
                return function (json, parseDate) {
                    if (json === "" || json === null || json === undefined) {
                        return json;
                    }
                    if (typeof json == "object") {
                        json = this.encode(json);
                    }
                    function evalParse(json) {
                        if (parseDate !== false) {
                            json = json.replace(__js_dateRegEx, "$1new Date($2)");
                            json = json.replace(re, "new Date($1,$2-1,$3,$4,$5,$6)");
                            json = json.replace(__js_dateRegEx2, "new Date($1)");
                        }
                        return eval("(" + json + ")");
                    }
                    var data = null;
                    if (window.JSON && window.JSON.parse) {
                        var dateReviver = function (key, value) {
                            if (typeof value === "string" && parseDate !== false) {
                                dateRe1.lastIndex = 0;
                                var a = dateRe1.exec(value);
                                if (a) {
                                    value = new Date(a[1], a[2] - 1, a[3], a[4], a[5], a[6]);
                                    return value;
                                }
                                dateRe2.lastIndex = 0;
                                var a = dateRe2.exec(value);
                                if (a) {
                                    value = new Date(parseInt(a[1]));
                                    return value;
                                }
                            }
                            return value;
                        };
                        try {
                            var json2 = json.replace(__js_dateRegEx, '$1"/Date($2)/"');
                            data = window.JSON.parse(json2, dateReviver)
                        } catch (ex) {
                            data = evalParse(json);
                        }
                    } else {
                        data = evalParse(json);
                    }
                    return data;
                }
            }
            ()
        })()
    });
    __js_dateRegEx = new RegExp('(^|[^\\\\])\\"\\\\/Date\\((-?[0-9]+)(?:[a-zA-Z]|(?:\\+|-)[0-9]{4})?\\)\\\\/\\"', "g");
    __js_dateRegEx2 = new RegExp("[\"']/Date\\(([0-9]+)\\)/[\"']", "g");
    tui.encode = tui.JSON.encode;
    tui.decode = tui.JSON.decode;

    tui.extend({
        /**
         * 获取顶层窗体(含tui控件)
         * @returns {*}
         */
        getTopWindow:   function(){
            var win = window;
            while(true){
                if(win.parent != win){
                    try{
                        if(!win.parent["tui"]){
                            break;
                        }
                    }catch (e){
                        break;
                    }
                }else{
                    break;
                }
                win = win.parent;
            }
            return win;
        },
        /**
         * 判断参数win 是否顶层窗体
         * @param win
         * @returns {boolean}
         */
        isTopWindow:    function(win){
            win = win||window;
            return win == (this.getTopWindow());
        },
        /**
         *@desc cacheData 用于存储的缓存数据
         */
        cacheData:  {
            tagId:  "Tui_Cache_Data",
            data:   {},
            tags:   [],
            hasKey: function(key){
                return this.tags.indexOf(key) != -1;
            }
        },
        /**
         *@desc 设置cache中存储的数据
         *@param key 用于存储数据的key值
         *@param param 数据存储成string，对象需转成json字符串
         *@param tag 区域名称，用于区分不同的面
         *@example 举例
         * setCache("sessionId", "00001")
         */
        setCache:  function(key, param, tag){
            if(this.isTopWindow()){
                var _data = this.cacheData.data;
                var _tags = this.cacheData.tags;
                tag = tag || this.cacheData.tagId;
                _data[tag] = _data[tag] || {};
                _data = _data[tag];
                _data[key] = param;
            }
        },
        /**
         *@desc 获取cache中存储的数据
         *@param key 用于存储数据的key值
         *@param tag 区域名称，用于区分不同的面
         *@example 举例
         * getCache("sessionId") = "00001"
         */
        getCache:   function(key, tag){
            if(this.isTopWindow()){
                var _data = this.cacheData.data;
                tag = tag || this.cacheData.tagId;
                _data = _data[tag];
                if(!_data){
                    return null;
                }
                return _data[key];
            }else{
                return null;
            }
        },
        /**
         * 加载文件间隔时间设定 (默认)
         */
        proTime: 500,
        /**
         * 加载文件间隔时间设定 (设置)
         */
        setLoadTime: function (param){
            if(param && typeof param === "number"){
                proTime = param;
            }
        },
        /**
         * 加载文件间隔时间设定 (获取)
         */
        getLoadTime: function (){
            return proTime;
        },
        addLoadList: function (obj){
            if(obj){
                if(tui.loadList == null){
                    tui.loadList = [];
                }
                tui.loadList.push(obj);
            }
        },
        getLoadModel: function () {
            return {name: "", id: "", url: "", type: ""};
        },
        /**
         * 数据加载控件 - 创建
         */
        createLoad: function(){
            $(".progressBar").each(function (i, k) {
                var progressBar = document.createElement("div");
                progressBar.setAttribute("class", "progress-bar");
                var progress = document.createElement("div");
                progress.setAttribute("class", "progress");
                var section = document.createElement("section");
                section.setAttribute("class", "container");
                var progressList = document.createElement("ul");
                progressList.setAttribute("class", "progressList");
                progress.appendChild(progressBar);
                section.appendChild(progress);
                section.appendChild(progressList);
                this.appendChild(section);
            });
        },
        /**
         * 数据加载控件 - 启动
         */
        loadBegin: function () {
            var progressBar_cul = $(".progressBar");
            if(progressBar_cul  == null){
                return;
            }
            //debugger;
            defaultProgress();
            var loadList = tui.loadList;
            if (loadList && loadList.length > 0) {
                var i = 0, l = loadList.length;
                var pw = 100 / l;
                setTimeout(function(){
                    //debugger;
                    var iAddVar = 1;
                    if(colorList.length>l){
                        if((colorList.length/l)>1){
                            iAddVar = Math.floor(colorList.length/l);
                        }
                    }
                    loadAjax(loadList, l, i, pw, iAddVar);
                }, this.proTime);
            }
        }
    });

    //--------------------- 数据加载控件 Start -----------------------------------//
    //进度条色块池
    //var colorList = ["#f63a0f", "#f63a0f", "#f63a0f", "#f27011", "#f2b01e", "#f2d31b", "#86e01e"];
    //var colorList = ["#F4ED19", "#FFC010", "#F57E20", "#EF4723", "#C11F44", "#7D297E", "#4A419A", "#3A53A5", "#0E8282", "#68BD44", "#94C93D"];
    var colorList = ["#C2FF01","#FFFF01","#FFC100"/*,"#FF7D01","#FF4103","#FE0201"*/,"#FD0342","#FF017E","#FF02B7","#FF00FC","#BF00FB","#7E01FF","#4001FF","#0000FE","#0142FE","#027FFF","#00C0FE","#01 FFFD","#04FEBE","#04FC82","#01FE41","#03FE01","#40FF02","#80FF02"];
    colorList["complete"] = "#86e01e";
    colorList["error"] = "#ED2124";
    /**
     * 内部函数: 配置文件加载 - 进度条全部完成
     */
    function loadAjaxComleteAll(){
        addProgressLoad("100%", colorList["complete"]);
        setTimeout(function(){
            hideProgress();
            tui.dispatchEvent(tui.progressEvent.COMPLETEALL, this);
        }, tui.proTime * 2);
    }
    function getCalNum(){
        colorList
    }
    /**
     * 内部函数: 配置文件加载 - 进度条完成
     */
    function loadAjaxComlete(e) {
        tui.dispatchEvent(tui.progressEvent.COMPLETE, this, e);
    }
    /**
     * 内部函数: 配置文件加载 - 进度条 (见tui.loadBegin())
     * @param loadList 加载文件库
     * @param l 加载文件库长度
     * @param i 处理次数
     * @param pw 进度条-递进长度
     * @param iAddNum 加载间隔色递增数
     */
    function loadAjax(loadList, l, i, pw, iAddNum) {
        //debugger;
        if(loadList == null || i>=l){
            loadAjaxComleteAll();
            //setTimeout(function(){
            //    hideProgress();
            //    tui.dispatchEvent(tui.progressEvent.COMPLETE,this);
            //}, tui.proTime);
            return;
        }
        var param = loadList[i];
        var type = param.url;
        type = type.split(".");
        type = type[type.length - 1];
        param.type = type;
        if(type != "xml" && type != "json"){
            type = "text";
        }
        //debugger;
        tui.ajax({
            dataType: type,
            url: param.url,
            success: function (obj, status, result) {
                ///debugger;
                var loaddata = tui.loaddata;
                if (param["id"]) {
                    loaddata[param.id] = obj;
                } else {
                    loaddata.push(obj);
                }
                addProgressList((param.name || "") + " :: 成功");
                loadAjaxComlete(param);
                if (i == l - 1) {
                    loadAjaxComleteAll();
                    return;
                }else {
                    addProgressLoad((pw * (i + 1)) + "%", colorList[i*iAddNum]);
                }
                i++;
                //debugger;
                setTimeout(function(){
                    loadAjax(loadList, l, i, pw, iAddNum);
                }, tui.proTime);
                //debugger;
                //$(obj).find("Node").each(function (i) {
                //var id = this.getAttribute("id"); //取属性
                //var idvalue = $(this).children("id").text(); //取文本
                //});
                //debugger;
            },
            error: function (e) {
                //debugger;
                    addProgressLoad((pw * (i + 1)) + "%", colorList["error"]);
                    addProgressList((param.name || "") + " :: 失败");
                i++;
                setTimeout(function(){
                    loadAjax(loadList, l, i, pw, iAddNum);
                }, tui.proTime * 2);
            }
        });
    }
    /**
     * 数据加载控件 - 初始化
     */
    function defaultProgress(){
        var progressBar_cul = $(".progressBar");
        if(progressBar_cul  == null){
            return;
        }else{
            progressBar_cul.show();
        }
        progressBar_cul = null;
    }
    /**
     * 数据加载控件 - 隐藏
     */
    function hideProgress(){
        var progressBar_cul = $(".progressBar");
        $(".progressBar").hide();
        progressBar_cul = null;
    }
    /**
     * 数据加载控件 - 显示
     */
    function showProgress(){
        var progressBar_cul = $(".progressBar");
        $(".progressBar").show();
        progressBar_cul = null;
    }
    /**
     * 数据加载控件 - 增加进度
     * @param value
     * @param bgcolor
     */
    function addProgressLoad(value, bgcolor){
        if(value == null && bgcolor == null){
            return;
        }
        var progressBar = $(".progress-bar")[0];
        if(progressBar) {
            //debugger;
            progressBar.style.width = value;
            progressBar.style.background = bgcolor;
        }
        progressBar = null;
    }
    /**
     * 数据加载控件 - 增加内容
     * @param value
     */
    function addProgressList(value){
        var progressList = $(".progressList")[0];
        if(progressList){
            var pprogressObj = document.createElement("li");
            pprogressObj.innerText = value;
            var fprogressObj = progressList.children;
            if(fprogressObj.length>0){
                progressList.insertBefore(pprogressObj, fprogressObj[0]);
            }else {
                progressList.appendChild(pprogressObj);
            }
        }
        fprogressObj = null;
        progressList = null;
    }
    /**
     * 获取字符串中 xml标签内容
     * @param param
     * @returns {nodeValue:[{tag:标签行含属性,nodeValue:"标签内容",value:"含标签内容"}],lenght:数量}
     */
    String.prototype.getElementsByTagName = function(param){
        var result, c = 0, s = 0, e = 0, f = true, n = "<";
        result = {};
        //debugger;
        while (f){
            c = this.substring(n=="<"?s:e, this.length).indexOf(param);
            if(c<0){
                f = false;
            }else{
                if(n=="<") {
                    s += c;
                }else{
                    e += c;
                }
                if(this.substr((n=="<"?s-1:e-2), (n=="<"?1:2)) != n || (n!="<" && this.substr(e+param.length,1) != ">")){
                    if(n=="<") {
                        s += param.length;
                    }else{
                        e += param.length;
                    }
                    continue;
                }
                if(n == "<"){
                    e = s + param.length;
                    n = "</";
                }else{
                        result["data"] = result["data"] || [];
                        var o = {};
                        o["value"] = this.substring(s-1, e+param.length+1);
                        var t = o["value"].indexOf(">");
                        if(t>=0){
                            t = s-1+t + 1;
                            o["tag"] = this.substring(s-1, t);
                            o["nodeValue"] = this.substring(t, e - 2);
                        }
                        result["data"].push(o);
                        n = "<";
                        s = e+param.length;
                }
            }
        }
        result["length"] = result["data"] && result["data"].length;
        if(result["data"]){
            if(result["data"].length==1){
                result["data"] = result["data"][0];
                if(result["data"] == null){
                    return null;
                }
            }
        }else{
            return null;
        }
        return result;
    };
    /**
     * 获取字符串内属性值 getAttribute
     * @param param
     */
    String.prototype.getAttribute = function(param){
        if(this.indexOf(param) < 0){
            return null;
        }else{
            var e, c, t = this.indexOf(param);
            t += param.length;
            if(this.substr(t, 1) != "="){
                return null;
            }else{
                e = this.substr(t+1, 1);
                if(e == '"' || e == "'"){
                    c = this.substring(t+2, this.length);
                    e = c.indexOf(e);
                    if(e<0){
                        return null;
                    }else{
                        e += (t+2);
                        return (this.substring(t+2, e));
                    }
                }else{
                    c = this.substring(t+1, this.length);
                    e = c.indexOf(">");
                    if(e<0){
                        return null;
                    }else{
                        e += (t+1);
                        return (this.substring(t+1, e));
                    }
                }
            }
        }
    };
    /**
     * 对对象派事件
     * @param eventName 事件名称
     * @param eventParam 事件参数
     */
    Object.prototype.dispatchEvent = function (eventName, eventParam){};

})(window);